version: '3.8'

services:
  frontend:
    build: 
      context: ./frontend
      args:
        - API_URL=/api
    container_name: city-bike-journeys-frontend

  nginx:
    image: nginx:1.20.1
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - 80:80
    container_name: reverse-proxy
    depends_on:
      - frontend
      - backend

  backend:
    build: ./backend
    environment:
      - PORT=3000
      - POSTGRES_URI=postgresql://db
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PW=${POSTGRES_PW}
    container_name: city-bike-journeys-backend
    depends_on:
      db:
        condition: service_healthy
  
  # The healthcheck makes sure that the DB actually is ready for accepting connecitons.
  # This is because backend is dependant on it and the depends_on section on its own
  # only checks that it has launched the container.
  db:
    image: postgres:14.6-alpine
    restart: always
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 5s
      timeout: 5s
      retries: 5
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PW}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_DB=${POSTGRES_DB}
      - PGDATA=/var/lib/postgresql/data/pgdata
    container_name: city-bike-journeys-db

volumes:
  postgres_data: